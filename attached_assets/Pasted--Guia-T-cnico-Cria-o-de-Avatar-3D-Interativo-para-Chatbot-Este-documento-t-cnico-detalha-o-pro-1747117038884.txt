# Guia Técnico: Criação de Avatar 3D Interativo para Chatbot

Este documento técnico detalha o processo de criação de um avatar 3D interativo baseado na imagem do robô "GEM-T" para integração com sistemas de chatbot.

## Sumário
1. [Visão Geral da Arquitetura](#visão-geral-da-arquitetura)
2. [Modelagem 3D do Avatar](#modelagem-3d-do-avatar)
3. [Implementação Web com Three.js](#implementação-web-com-threejs)
4. [Sistema de Animações e Interatividade](#sistema-de-animações-e-interatividade)
5. [Integração com API de Chatbot](#integração-com-api-de-chatbot)

## Visão Geral da Arquitetura

A arquitetura proposta utiliza uma abordagem baseada em WebGL para renderização 3D no navegador, com Three.js como biblioteca principal e uma camada de integração com APIs de chatbot.

```
/projeto-avatar-3d
  /assets
    /models        /* Arquivos do modelo 3D (.glb, .gltf) */
    /textures      /* Texturas e materiais */
    /animations    /* Dados de animação keyframe */
  /src
    /components    /* Componentes reutilizáveis */
    /controllers   /* Controladores de interação e animação */
    /services      /* Serviços de API e integração */
    /utils         /* Utilitários */
    main.js        /* Ponto de entrada principal */
  index.html       /* Página de demonstração */
```

## Modelagem 3D do Avatar

### Criação do Modelo Base

Para criar o modelo 3D do GEM-T, podemos usar Blender, que é gratuito e poderoso para modelagem 3D.

```javascript
// Especificações técnicas para o modelo
const modelSpecs = {
  poligonos: {
    corpo: 2500,         // Baixa complexidade para desempenho
    rosto: 800,          // Detalhes para expressões faciais
    total: 5000          // Limite de polígonos recomendado
  },
  texturas: {
    difusa: '1024x1024', // Mapa de cores
    normal: '1024x1024', // Mapa de normais para detalhes
    emissiva: '512x512'  // Para efeitos de brilho (olhos, símbolo)
  },
  formato: 'glTF'        // Formato otimizado para web
};
```

### Configuração de Materiais

```javascript
// Exemplo de configuração dos materiais em Three.js
const createMaterials = () => {
  // Material do corpo principal - azul escuro metálico
  const bodyMaterial = new THREE.MeshStandardMaterial({
    color: 0x003366,
    metalness: 0.7,
    roughness: 0.2
  });
  
  // Material emissivo para olhos e símbolos
  const emissiveMaterial = new THREE.MeshStandardMaterial({
    color: 0x00BFFF,
    emissive: 0x00BFFF,
    emissiveIntensity: 1.5
  });
  
  // Material para o símbolo no peito
  const symbolMaterial = new THREE.MeshStandardMaterial({
    color: 0xFF00FF,
    emissive: 0xFF00FF,
    emissiveIntensity: 0.8
  });
  
  return { bodyMaterial, emissiveMaterial, symbolMaterial };
};
```

## Implementação Web com Three.js

### Configuração Básica da Cena

```javascript
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

class AvatarScene {
  constructor(container) {
    // Configuração da cena
    this.scene = new THREE.Scene();
    this.scene.background = new THREE.Color(0x000818);
    
    // Configuração da câmera
    this.camera = new THREE.PerspectiveCamera(
      45, 
      container.clientWidth / container.clientHeight, 
      0.1, 
      1000
    );
    this.camera.position.z = 5;
    
    // Configuração do renderizador
    this.renderer = new THREE.WebGLRenderer({ antialias: true });
    this.renderer.setSize(container.clientWidth, container.clientHeight);
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.outputEncoding = THREE.sRGBEncoding;
    container.appendChild(this.renderer.domElement);
    
    // Controles
    this.controls = new OrbitControls(this.camera, this.renderer.domElement);
    this.controls.enableDamping = true;
    this.controls.dampingFactor = 0.05;
    
    // Iluminação
    this.setupLights();
    
    // Carregar modelo
    this.loadAvatar();
    
    // Iniciar loop de animação
    this.animate();
  }
  
  setupLights() {
    // Luz ambiente
    const ambientLight = new THREE.AmbientLight(0xcccccc, 0.4);
    this.scene.add(ambientLight);
    
    // Luz principal (frente)
    const mainLight = new THREE.DirectionalLight(0xffffff, 1);
    mainLight.position.set(0, 5, 10);
    this.scene.add(mainLight);
    
    // Luz de preenchimento (lateral)
    const fillLight = new THREE.DirectionalLight(0x3366ff, 0.8);
    fillLight.position.set(-5, 0, 2);
    this.scene.add(fillLight);
    
    // Luz de contorno (atrás)
    const rimLight = new THREE.DirectionalLight(0x00ffff, 0.5);
    rimLight.position.set(0, 0, -10);
    this.scene.add(rimLight);
  }
  
  loadAvatar() {
    const loader = new GLTFLoader();
    
    loader.load(
      'assets/models/gem-t.glb',
      (gltf) => {
        this.avatar = gltf.scene;
        this.scene.add(this.avatar);
        
        // Configurar animações
        this.mixer = new THREE.AnimationMixer(this.avatar);
        this.animations = gltf.animations;
        
        // Mapear animações por nome
        this.animationActions = {};
        this.animations.forEach((clip) => {
          this.animationActions[clip.name] = this.mixer.clipAction(clip);
        });
        
        // Iniciar com expressão neutra
        this.playAnimation('idle');
      },
      (xhr) => {
        console.log((xhr.loaded / xhr.total * 100) + '% carregado');
      },
      (error) => {
        console.error('Erro ao carregar o modelo', error);
      }
    );
  }
  
  playAnimation(name, transitionTime = 0.5) {
    const action = this.animationActions[name];
    if (action) {
      // Transição suave entre animações
      if (this.currentAction) {
        this.currentAction.fadeOut(transitionTime);
      }
      action.reset().fadeIn(transitionTime).play();
      this.currentAction = action;
    }
  }
  
  animate() {
    requestAnimationFrame(this.animate.bind(this));
    
    // Atualizar controles
    this.controls.update();
    
    // Atualizar mixer de animação
    if (this.mixer) {
      this.mixer.update(0.016); // ~60fps
    }
    
    // Renderizar cena
    this.renderer.render(this.scene, this.camera);
  }
  
  resize(width, height) {
    this.camera.aspect = width / height;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(width, height);
  }
}

// Inicialização
document.addEventListener('DOMContentLoaded', () => {
  const container = document.getElementById('avatar-container');
  const avatarScene = new AvatarScene(container);
  
  // Responsividade
  window.addEventListener('resize', () => {
    avatarScene.resize(container.clientWidth, container.clientHeight);
  });
});
```

## Sistema de Animações e Interatividade

### Configuração de Expressões Faciais

```javascript
class FacialExpressionController {
  constructor(avatar) {
    this.avatar = avatar;
    
    // Encontrar malhas de expressão facial (morph targets)
    this.faceObject = this.findFaceObject(avatar);
    
    // Definir expressões disponíveis
    this.expressions = {
      neutral: { smileMorph: 0, eyesMorph: 0 },
      happy: { smileMorph: 1, eyesMorph: 0.7 },
      thinking: { smileMorph: 0, eyesMorph: -0.3 },
      surprised: { smileMorph: 0.3, eyesMorph: 1 }
    };
  }
  
  findFaceObject(model) {
    let face = null;
    model.traverse((object) => {
      if (object.isMesh && object.name.includes('face')) {
        face = object;
      }
    });
    return face;
  }
  
  setExpression(expressionName, transitionTime = 0.5) {
    if (!this.faceObject || !this.expressions[expressionName]) return;
    
    const expression = this.expressions[expressionName];
    const morphTargets = this.faceObject.morphTargetDictionary;
    
    // Animação suave dos morph targets
    const startValues = {
      smile: this.faceObject.morphTargetInfluences[morphTargets.smile],
      eyes: this.faceObject.morphTargetInfluences[morphTargets.eyes]
    };
    
    const targetValues = {
      smile: expression.smileMorph,
      eyes: expression.eyesMorph
    };
    
    // Usando GSAP para animação suave (ou implementação personalizada)
    gsap.to(startValues, {
      smile: targetValues.smile,
      eyes: targetValues.eyes,
      duration: transitionTime,
      onUpdate: () => {
        this.faceObject.morphTargetInfluences[morphTargets.smile] = startValues.smile;
        this.faceObject.morphTargetInfluences[morphTargets.eyes] = startValues.eyes;
      }
    });
  }
}
```

### Sistema de Resposta a Eventos

```javascript
class AvatarInteractionController {
  constructor(avatarScene, expressionController) {
    this.avatarScene = avatarScene;
    this.expressionController = expressionController;
    
    // Estados do chatbot
    this.states = {
      IDLE: 'idle',
      LISTENING: 'listening',
      PROCESSING: 'processing',
      SPEAKING: 'speaking'
    };
    
    this.currentState = this.states.IDLE;
  }
  
  updateState(newState) {
    if (this.currentState === newState) return;
    
    this.currentState = newState;
    
    // Atualizar animações e expressões baseadas no estado
    switch (newState) {
      case this.states.IDLE:
        this.avatarScene.playAnimation('idle');
        this.expressionController.setExpression('neutral');
        break;
        
      case this.states.LISTENING:
        this.avatarScene.playAnimation('listening');
        this.expressionController.setExpression('neutral');
        // Animar antena pulsando
        this.pulseAntenna();
        break;
        
      case this.states.PROCESSING:
        this.avatarScene.playAnimation('thinking');
        this.expressionController.setExpression('thinking');
        // Efeito de rotação no símbolo do peito
        this.rotateChestSymbol();
        break;
        
      case this.states.SPEAKING:
        this.avatarScene.playAnimation('talking');
        this.expressionController.setExpression('happy');
        break;
    }
  }
  
  pulseAntenna() {
    // Encontrar o objeto da antena
    const antenna = this.findObjectByName('antenna');
    if (!antenna) return;
    
    // Animação de pulsação
    gsap.to(antenna.scale, {
      x: 1.2,
      y: 1.2,
      z: 1.2,
      duration: 0.5,
      repeat: -1,
      yoyo: true
    });
  }
  
  rotateChestSymbol() {
    // Encontrar o símbolo do peito
    const symbol = this.findObjectByName('chest_symbol');
    if (!symbol) return;
    
    // Animação de rotação
    gsap.to(symbol.rotation, {
      y: Math.PI * 2,
      duration: 2,
      repeat: -1,
      ease: "none"
    });
  }
  
  findObjectByName(name) {
    let target = null;
    this.avatarScene.avatar.traverse((object) => {
      if (object.name === name) {
        target = object;
      }
    });
    return target;
  }
  
  // Métodos para integrar com eventos do chatbot
  onUserStartSpeaking() {
    this.updateState(this.states.LISTENING);
  }
  
  onUserStopSpeaking() {
    this.updateState(this.states.PROCESSING);
  }
  
  onBotStartResponse() {
    this.updateState(this.states.SPEAKING);
  }
  
  onBotFinishResponse() {
    this.updateState(this.states.IDLE);
  }
}
```

## Integração com API de Chatbot

### Conexão com Serviços de Chatbot

```javascript
class ChatbotService {
  constructor(avatarController) {
    this.avatarController = avatarController;
    this.apiUrl = 'https://api.seu-servico-chatbot.com';
    this.sessionId = this.generateSessionId();
    
    // Configurar reconhecimento de voz (opcional)
    this.setupSpeechRecognition();
    
    // Configurar síntese de voz (opcional)
    this.setupSpeechSynthesis();
  }
  
  generateSessionId() {
    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }
  
  setupSpeechRecognition() {
    if (!('webkitSpeechRecognition' in window)) {
      console.warn('Reconhecimento de voz não suportado neste navegador');
      return;
    }
    
    this.recognition = new webkitSpeechRecognition();
    this.recognition.continuous = false;
    this.recognition.interimResults = false;
    this.recognition.lang = 'pt-BR';
    
    this.recognition.onstart = () => {
      this.avatarController.onUserStartSpeaking();
    };
    
    this.recognition.onresult = (event) => {
      const userInput = event.results[0][0].transcript;
      this.sendMessage(userInput);
    };
    
    this.recognition.onend = () => {
      this.avatarController.onUserStopSpeaking();
    };
  }
  
  setupSpeechSynthesis() {
    if (!('speechSynthesis' in window)) {
      console.warn('Síntese de voz não suportada neste navegador');
      return;
    }
    
    this.synthesis = window.speechSynthesis;
  }
  
  startListening() {
    if (this.recognition) {
      this.recognition.start();
    }
  }
  
  async sendMessage(text) {
    try {
      this.avatarController.updateState('PROCESSING');
      
      const response = await fetch(`${this.apiUrl}/message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          sessionId: this.sessionId,
          message: text
        })
      });
      
      const data = await response.json();
      this.handleBotResponse(data);
    } catch (error) {
      console.error('Erro ao enviar mensagem para o chatbot', error);
      this.avatarController.updateState('IDLE');
    }
  }
  
  handleBotResponse(data) {
    const { text, intent, sentiment } = data;
    
    // Atualizar estado do avatar com base no sentimento detectado
    const expressionMap = {
      positive: 'happy',
      neutral: 'neutral',
      negative: 'thinking'
    };
    
    const expression = expressionMap[sentiment] || 'neutral';
    this.avatarController.expressionController.setExpression(expression);
    
    // Iniciar fala do bot
    this.avatarController.onBotStartResponse();
    
    // Exibir texto na interface
    this.displayMessage(text);
    
    // Falar resposta (se síntese de voz ativada)
    if (this.synthesis) {
      this.speakResponse(text);
    } else {
      // Tempo estimado de leitura para animação
      const readingTime = text.length * 50; // ~50ms por caractere
      setTimeout(() => {
        this.avatarController.onBotFinishResponse();
      }, readingTime);
    }
  }
  
  displayMessage(text) {
    // Implementação específica para exibir mensagem na interface
    const messageContainer = document.getElementById('message-container');
    if (messageContainer) {
      const messageElement = document.createElement('div');
      messageElement.className = 'bot-message';
      messageElement.textContent = text;
      messageContainer.appendChild(messageElement);
      messageContainer.scrollTop = messageContainer.scrollHeight;
    }
  }
  
  speakResponse(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'pt-BR';
    
    utterance.onstart = () => {
      // Já iniciado pelo handleBotResponse
    };
    
    utterance.onend = () => {
      this.avatarController.onBotFinishResponse();
    };
    
    this.synthesis.speak(utterance);
  }
}
```

### Implementação HTML e CSS Básicos

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>GEM-T | Avatar 3D Interativo</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="chatbot-container">
    <div id="avatar-container"></div>
    
    <div class="chat-interface">
      <div id="message-container" class="messages"></div>
      
      <div class="input-container">
        <input type="text" id="user-input" placeholder="Digite sua mensagem...">
        <button id="send-button">Enviar</button>
        <button id="mic-button">🎤</button>
      </div>
    </div>
  </div>
  
  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r132/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.7.1/gsap.min.js"></script>
  <script type="module" src="src/main.js"></script>
</body>
</html>
```

```css
:root {
  --color-primary: #00BFFF;
  --color-secondary: #FF00FF;
  --color-background: #000818;
  --color-text: #FFFFFF;
  --color-input-bg: #0A1630;
  --color-button: #003366;
}

body {
  margin: 0;
  padding: 0;
  font-family: 'Roboto', sans-serif;
  background-color: var(--color-background);
  color: var(--color-text);
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.chatbot-container {
  display: flex;
  flex-direction: column;
  width: 90%;
  max-width: 800px;
  height: 90vh;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 0 30px rgba(0, 191, 255, 0.3);
}

#avatar-container {
  height: 60%;
  background-color: var(--color-background);
  position: relative;
}

.chat-interface {
  height: 40%;
  display: flex;
  flex-direction: column;
  background-color: var(--color-input-bg);
  padding: 16px;
}

.messages {
  flex-grow: 1;
  overflow-y: auto;
  padding: 10px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.bot-message {
  background-color: rgba(0, 191, 255, 0.2);
  padding: 12px 16px;
  border-radius: 12px;
  border-top-left-radius: 0;
  align-self: flex-start;
  max-width: 80%;
}

.user-message {
  background-color: rgba(255, 0, 255, 0.2);
  padding: 12px 16px;
  border-radius: 12px;
  border-top-right-radius: 0;
  align-self: flex-end;
  max-width: 80%;
}

.input-container {
  display: flex;
  gap: 8px;
  margin-top: 16px;
}

#user-input {
  flex-grow: 1;
  background-color: rgba(255, 255, 255, 0.1);
  border: none;
  color: var(--color-text);
  padding: 12px 16px;
  border-radius: 24px;
  font-size: 16px;
}

button {
  background-color: var(--color-button);
  color: var(--color-text);
  border: none;
  padding: 0 20px;
  border-radius: 24px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: var(--color-primary);
}

#mic-button {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
}

@media (max-width: 768px) {
  .chatbot-container {
    width: 100%;
    height: 100vh;
    border-radius: 0;
  }
  
  #avatar-container {
    height: 50%;
  }
  
  .chat-interface {
    height: 50%;
  }
}
```

## Considerações Finais e Otimizações

1. **Desempenho**:
   - Utilize níveis de detalhe (LOD) para otimizar renderização em dispositivos com menor capacidade
   - Implemente compressão de texturas (DXT/KTX)
   - Use instanciação para elementos repetitivos

2. **Acessibilidade**:
   - Inclua legendas para conteúdo falado
   - Forneça alternativas de texto para interações visuais
   - Implemente controles adaptáveis para diferentes dispositivos

3. **Segurança**:
   - Valide todas as entradas do usuário antes de processá-las
   - Implemente proteção contra XSS nas respostas do chatbot
   - Use HTTPS para todas as comunicações com a API

Para um desenvolvimento mais aprofundado, considere frameworks como React Three Fiber para integração com React, ou explore soluções como Ready Player Me para avatares personalizáveis.